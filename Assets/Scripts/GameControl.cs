//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/GameControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControl"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""a62be432-3bbc-4fff-bdfc-624996a6fe14"",
            ""actions"": [
                {
                    ""name"": ""ShowMenu"",
                    ""type"": ""Button"",
                    ""id"": ""2674f58f-47af-4ac9-bdd2-f2f52812d765"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c443f7af-5af3-4d9b-a8eb-a70b8c14b4cc"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jamp"",
                    ""type"": ""Button"",
                    ""id"": ""9fb1b9ff-7559-4584-8648-6157ece66bb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstHook"",
                    ""type"": ""Button"",
                    ""id"": ""fa6a9ac6-78f5-4253-ad16-04883e674d53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondHook"",
                    ""type"": ""Button"",
                    ""id"": ""8a3d2647-c173-4e6a-952d-cf6e12dab5d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NewBot"",
                    ""type"": ""Button"",
                    ""id"": ""febbc806-ee14-494d-8fef-0c1f5b1310b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Destroy"",
                    ""type"": ""Button"",
                    ""id"": ""efc775a1-0de0-4da9-bb66-363a05f164ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2d579320-b5de-4501-8cf2-3294e2bdcc8b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f4dc1073-cd63-42db-a241-023326e24965"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""65cac2c5-3d13-433a-b674-41a83780b139"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""af7aaa37-6ba0-4fdb-88a4-bc5f01555284"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""deb24ebd-82fb-4d37-bcb2-b717014bb4a4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jamp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78abd511-7e21-4a42-bab5-aec13617af30"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c5a3c8e-9d5e-4c9c-b6e9-27ab97e86f03"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4538bbe-67c6-40c3-a459-bf790e6dcbd3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NewBot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca10c834-25c3-4f0d-8a80-613aed48e914"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destroy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""e0b2b1d7-7492-4554-b834-4480fb9fdca6"",
            ""actions"": [
                {
                    ""name"": ""UnshowMenu"",
                    ""type"": ""Button"",
                    ""id"": ""1190b9c0-f5d2-47b6-aeed-3cdacd2f1d51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30335523-ebdf-40ed-9222-1dc191f772de"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnshowMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnOneHook"",
            ""id"": ""4c18ff28-2d85-4e43-90a7-ef38d5515a0a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f3a3d3d8-4956-464b-adb2-5133dd5d2a7d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tension"",
                    ""type"": ""Value"",
                    ""id"": ""374567a2-5283-4ca4-8f20-7d79f1172d60"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FirstHook"",
                    ""type"": ""Button"",
                    ""id"": ""3a9a35d3-e534-4f3e-bfd4-9254f227af7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondHook"",
                    ""type"": ""Button"",
                    ""id"": ""1a072e68-df28-43b4-ab20-6ce38d930e0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NewBot"",
                    ""type"": ""Button"",
                    ""id"": ""92333f5a-24d4-4e1e-ac60-2fabe757d005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Destroy"",
                    ""type"": ""Button"",
                    ""id"": ""1032336c-ea16-4478-b0e0-8a891c6253d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fb3f755a-63e6-4529-b8e9-0168080c8be7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""029673b1-e1fa-4987-913a-d9c4c85b0530"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a2c0e477-e1ff-44b6-b451-5f7b2b7e9c45"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3337b142-e98d-4d33-9aa5-6e63b6a6fe44"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tension"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5a9dfc1e-16c0-42f4-9d88-f590db4ca6d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tension"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3d897734-e289-4c0b-94e5-3564c2d223dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tension"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3ffefab6-7a6b-40ac-94d2-b7770f4ef004"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b2a164a-0510-4391-98e4-3545dfa95b84"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81cdd716-735a-4769-829a-7acc642c2c70"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NewBot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d0a6f50-cd25-419d-9a9a-c3705c966ac5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destroy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnTwoHook"",
            ""id"": ""c3d21065-ea60-4817-8aee-97b7c708682e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8dd5400d-7a92-4bbe-b996-dcfc2c40cc4b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tension"",
                    ""type"": ""Value"",
                    ""id"": ""bc124e6b-7104-455c-875c-7ac767a723b0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FirstHook"",
                    ""type"": ""Button"",
                    ""id"": ""1897213a-3835-4496-abdb-55656c8d39f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondHook"",
                    ""type"": ""Button"",
                    ""id"": ""1e4b9fe6-2ecb-4f9f-ba86-eb8016d90606"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NewBot"",
                    ""type"": ""Button"",
                    ""id"": ""200d407a-20a2-469e-a287-537391fcfaae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Destroy"",
                    ""type"": ""Button"",
                    ""id"": ""6aa1167b-47db-4b24-9a79-09c13212991d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9b75d108-afba-4fcf-a7ca-213d5a7b2768"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1981af4d-eaef-445a-95e0-069d05911d3b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5dcc897f-de9d-402a-b484-0c65e453acf0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ebe640df-edc2-468d-8f94-870dd69944c7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tension"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2d93e55a-f251-4f97-afd2-457a238dd118"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tension"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""14b9d195-380c-40bd-ba24-86dcde51059c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tension"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f969057b-0075-43a6-8a4b-f7d70d28f0d3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a2c2909-01bc-410f-be41-8752432f6bef"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5395f091-aab7-4a71-b27b-57bde261c425"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NewBot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ea8a567-c470-4b73-87cb-4dd7923c4bee"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destroy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialog"",
            ""id"": ""60af871e-c7d4-413b-b7d0-7592345850cb"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_ShowMenu = m_Gameplay.FindAction("ShowMenu", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Jamp = m_Gameplay.FindAction("Jamp", throwIfNotFound: true);
        m_Gameplay_FirstHook = m_Gameplay.FindAction("FirstHook", throwIfNotFound: true);
        m_Gameplay_SecondHook = m_Gameplay.FindAction("SecondHook", throwIfNotFound: true);
        m_Gameplay_NewBot = m_Gameplay.FindAction("NewBot", throwIfNotFound: true);
        m_Gameplay_Destroy = m_Gameplay.FindAction("Destroy", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_UnshowMenu = m_Menu.FindAction("UnshowMenu", throwIfNotFound: true);
        // OnOneHook
        m_OnOneHook = asset.FindActionMap("OnOneHook", throwIfNotFound: true);
        m_OnOneHook_Move = m_OnOneHook.FindAction("Move", throwIfNotFound: true);
        m_OnOneHook_Tension = m_OnOneHook.FindAction("Tension", throwIfNotFound: true);
        m_OnOneHook_FirstHook = m_OnOneHook.FindAction("FirstHook", throwIfNotFound: true);
        m_OnOneHook_SecondHook = m_OnOneHook.FindAction("SecondHook", throwIfNotFound: true);
        m_OnOneHook_NewBot = m_OnOneHook.FindAction("NewBot", throwIfNotFound: true);
        m_OnOneHook_Destroy = m_OnOneHook.FindAction("Destroy", throwIfNotFound: true);
        // OnTwoHook
        m_OnTwoHook = asset.FindActionMap("OnTwoHook", throwIfNotFound: true);
        m_OnTwoHook_Move = m_OnTwoHook.FindAction("Move", throwIfNotFound: true);
        m_OnTwoHook_Tension = m_OnTwoHook.FindAction("Tension", throwIfNotFound: true);
        m_OnTwoHook_FirstHook = m_OnTwoHook.FindAction("FirstHook", throwIfNotFound: true);
        m_OnTwoHook_SecondHook = m_OnTwoHook.FindAction("SecondHook", throwIfNotFound: true);
        m_OnTwoHook_NewBot = m_OnTwoHook.FindAction("NewBot", throwIfNotFound: true);
        m_OnTwoHook_Destroy = m_OnTwoHook.FindAction("Destroy", throwIfNotFound: true);
        // Dialog
        m_Dialog = asset.FindActionMap("Dialog", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_ShowMenu;
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_Jamp;
    private readonly InputAction m_Gameplay_FirstHook;
    private readonly InputAction m_Gameplay_SecondHook;
    private readonly InputAction m_Gameplay_NewBot;
    private readonly InputAction m_Gameplay_Destroy;
    public struct GameplayActions
    {
        private @GameControl m_Wrapper;
        public GameplayActions(@GameControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShowMenu => m_Wrapper.m_Gameplay_ShowMenu;
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @Jamp => m_Wrapper.m_Gameplay_Jamp;
        public InputAction @FirstHook => m_Wrapper.m_Gameplay_FirstHook;
        public InputAction @SecondHook => m_Wrapper.m_Gameplay_SecondHook;
        public InputAction @NewBot => m_Wrapper.m_Gameplay_NewBot;
        public InputAction @Destroy => m_Wrapper.m_Gameplay_Destroy;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @ShowMenu.started += instance.OnShowMenu;
            @ShowMenu.performed += instance.OnShowMenu;
            @ShowMenu.canceled += instance.OnShowMenu;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jamp.started += instance.OnJamp;
            @Jamp.performed += instance.OnJamp;
            @Jamp.canceled += instance.OnJamp;
            @FirstHook.started += instance.OnFirstHook;
            @FirstHook.performed += instance.OnFirstHook;
            @FirstHook.canceled += instance.OnFirstHook;
            @SecondHook.started += instance.OnSecondHook;
            @SecondHook.performed += instance.OnSecondHook;
            @SecondHook.canceled += instance.OnSecondHook;
            @NewBot.started += instance.OnNewBot;
            @NewBot.performed += instance.OnNewBot;
            @NewBot.canceled += instance.OnNewBot;
            @Destroy.started += instance.OnDestroy;
            @Destroy.performed += instance.OnDestroy;
            @Destroy.canceled += instance.OnDestroy;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @ShowMenu.started -= instance.OnShowMenu;
            @ShowMenu.performed -= instance.OnShowMenu;
            @ShowMenu.canceled -= instance.OnShowMenu;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jamp.started -= instance.OnJamp;
            @Jamp.performed -= instance.OnJamp;
            @Jamp.canceled -= instance.OnJamp;
            @FirstHook.started -= instance.OnFirstHook;
            @FirstHook.performed -= instance.OnFirstHook;
            @FirstHook.canceled -= instance.OnFirstHook;
            @SecondHook.started -= instance.OnSecondHook;
            @SecondHook.performed -= instance.OnSecondHook;
            @SecondHook.canceled -= instance.OnSecondHook;
            @NewBot.started -= instance.OnNewBot;
            @NewBot.performed -= instance.OnNewBot;
            @NewBot.canceled -= instance.OnNewBot;
            @Destroy.started -= instance.OnDestroy;
            @Destroy.performed -= instance.OnDestroy;
            @Destroy.canceled -= instance.OnDestroy;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_UnshowMenu;
    public struct MenuActions
    {
        private @GameControl m_Wrapper;
        public MenuActions(@GameControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @UnshowMenu => m_Wrapper.m_Menu_UnshowMenu;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @UnshowMenu.started += instance.OnUnshowMenu;
            @UnshowMenu.performed += instance.OnUnshowMenu;
            @UnshowMenu.canceled += instance.OnUnshowMenu;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @UnshowMenu.started -= instance.OnUnshowMenu;
            @UnshowMenu.performed -= instance.OnUnshowMenu;
            @UnshowMenu.canceled -= instance.OnUnshowMenu;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // OnOneHook
    private readonly InputActionMap m_OnOneHook;
    private List<IOnOneHookActions> m_OnOneHookActionsCallbackInterfaces = new List<IOnOneHookActions>();
    private readonly InputAction m_OnOneHook_Move;
    private readonly InputAction m_OnOneHook_Tension;
    private readonly InputAction m_OnOneHook_FirstHook;
    private readonly InputAction m_OnOneHook_SecondHook;
    private readonly InputAction m_OnOneHook_NewBot;
    private readonly InputAction m_OnOneHook_Destroy;
    public struct OnOneHookActions
    {
        private @GameControl m_Wrapper;
        public OnOneHookActions(@GameControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_OnOneHook_Move;
        public InputAction @Tension => m_Wrapper.m_OnOneHook_Tension;
        public InputAction @FirstHook => m_Wrapper.m_OnOneHook_FirstHook;
        public InputAction @SecondHook => m_Wrapper.m_OnOneHook_SecondHook;
        public InputAction @NewBot => m_Wrapper.m_OnOneHook_NewBot;
        public InputAction @Destroy => m_Wrapper.m_OnOneHook_Destroy;
        public InputActionMap Get() { return m_Wrapper.m_OnOneHook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnOneHookActions set) { return set.Get(); }
        public void AddCallbacks(IOnOneHookActions instance)
        {
            if (instance == null || m_Wrapper.m_OnOneHookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnOneHookActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Tension.started += instance.OnTension;
            @Tension.performed += instance.OnTension;
            @Tension.canceled += instance.OnTension;
            @FirstHook.started += instance.OnFirstHook;
            @FirstHook.performed += instance.OnFirstHook;
            @FirstHook.canceled += instance.OnFirstHook;
            @SecondHook.started += instance.OnSecondHook;
            @SecondHook.performed += instance.OnSecondHook;
            @SecondHook.canceled += instance.OnSecondHook;
            @NewBot.started += instance.OnNewBot;
            @NewBot.performed += instance.OnNewBot;
            @NewBot.canceled += instance.OnNewBot;
            @Destroy.started += instance.OnDestroy;
            @Destroy.performed += instance.OnDestroy;
            @Destroy.canceled += instance.OnDestroy;
        }

        private void UnregisterCallbacks(IOnOneHookActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Tension.started -= instance.OnTension;
            @Tension.performed -= instance.OnTension;
            @Tension.canceled -= instance.OnTension;
            @FirstHook.started -= instance.OnFirstHook;
            @FirstHook.performed -= instance.OnFirstHook;
            @FirstHook.canceled -= instance.OnFirstHook;
            @SecondHook.started -= instance.OnSecondHook;
            @SecondHook.performed -= instance.OnSecondHook;
            @SecondHook.canceled -= instance.OnSecondHook;
            @NewBot.started -= instance.OnNewBot;
            @NewBot.performed -= instance.OnNewBot;
            @NewBot.canceled -= instance.OnNewBot;
            @Destroy.started -= instance.OnDestroy;
            @Destroy.performed -= instance.OnDestroy;
            @Destroy.canceled -= instance.OnDestroy;
        }

        public void RemoveCallbacks(IOnOneHookActions instance)
        {
            if (m_Wrapper.m_OnOneHookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnOneHookActions instance)
        {
            foreach (var item in m_Wrapper.m_OnOneHookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnOneHookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnOneHookActions @OnOneHook => new OnOneHookActions(this);

    // OnTwoHook
    private readonly InputActionMap m_OnTwoHook;
    private List<IOnTwoHookActions> m_OnTwoHookActionsCallbackInterfaces = new List<IOnTwoHookActions>();
    private readonly InputAction m_OnTwoHook_Move;
    private readonly InputAction m_OnTwoHook_Tension;
    private readonly InputAction m_OnTwoHook_FirstHook;
    private readonly InputAction m_OnTwoHook_SecondHook;
    private readonly InputAction m_OnTwoHook_NewBot;
    private readonly InputAction m_OnTwoHook_Destroy;
    public struct OnTwoHookActions
    {
        private @GameControl m_Wrapper;
        public OnTwoHookActions(@GameControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_OnTwoHook_Move;
        public InputAction @Tension => m_Wrapper.m_OnTwoHook_Tension;
        public InputAction @FirstHook => m_Wrapper.m_OnTwoHook_FirstHook;
        public InputAction @SecondHook => m_Wrapper.m_OnTwoHook_SecondHook;
        public InputAction @NewBot => m_Wrapper.m_OnTwoHook_NewBot;
        public InputAction @Destroy => m_Wrapper.m_OnTwoHook_Destroy;
        public InputActionMap Get() { return m_Wrapper.m_OnTwoHook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnTwoHookActions set) { return set.Get(); }
        public void AddCallbacks(IOnTwoHookActions instance)
        {
            if (instance == null || m_Wrapper.m_OnTwoHookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnTwoHookActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Tension.started += instance.OnTension;
            @Tension.performed += instance.OnTension;
            @Tension.canceled += instance.OnTension;
            @FirstHook.started += instance.OnFirstHook;
            @FirstHook.performed += instance.OnFirstHook;
            @FirstHook.canceled += instance.OnFirstHook;
            @SecondHook.started += instance.OnSecondHook;
            @SecondHook.performed += instance.OnSecondHook;
            @SecondHook.canceled += instance.OnSecondHook;
            @NewBot.started += instance.OnNewBot;
            @NewBot.performed += instance.OnNewBot;
            @NewBot.canceled += instance.OnNewBot;
            @Destroy.started += instance.OnDestroy;
            @Destroy.performed += instance.OnDestroy;
            @Destroy.canceled += instance.OnDestroy;
        }

        private void UnregisterCallbacks(IOnTwoHookActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Tension.started -= instance.OnTension;
            @Tension.performed -= instance.OnTension;
            @Tension.canceled -= instance.OnTension;
            @FirstHook.started -= instance.OnFirstHook;
            @FirstHook.performed -= instance.OnFirstHook;
            @FirstHook.canceled -= instance.OnFirstHook;
            @SecondHook.started -= instance.OnSecondHook;
            @SecondHook.performed -= instance.OnSecondHook;
            @SecondHook.canceled -= instance.OnSecondHook;
            @NewBot.started -= instance.OnNewBot;
            @NewBot.performed -= instance.OnNewBot;
            @NewBot.canceled -= instance.OnNewBot;
            @Destroy.started -= instance.OnDestroy;
            @Destroy.performed -= instance.OnDestroy;
            @Destroy.canceled -= instance.OnDestroy;
        }

        public void RemoveCallbacks(IOnTwoHookActions instance)
        {
            if (m_Wrapper.m_OnTwoHookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnTwoHookActions instance)
        {
            foreach (var item in m_Wrapper.m_OnTwoHookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnTwoHookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnTwoHookActions @OnTwoHook => new OnTwoHookActions(this);

    // Dialog
    private readonly InputActionMap m_Dialog;
    private List<IDialogActions> m_DialogActionsCallbackInterfaces = new List<IDialogActions>();
    public struct DialogActions
    {
        private @GameControl m_Wrapper;
        public DialogActions(@GameControl wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Dialog; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogActions set) { return set.Get(); }
        public void AddCallbacks(IDialogActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IDialogActions instance)
        {
        }

        public void RemoveCallbacks(IDialogActions instance)
        {
            if (m_Wrapper.m_DialogActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogActions @Dialog => new DialogActions(this);
    public interface IGameplayActions
    {
        void OnShowMenu(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJamp(InputAction.CallbackContext context);
        void OnFirstHook(InputAction.CallbackContext context);
        void OnSecondHook(InputAction.CallbackContext context);
        void OnNewBot(InputAction.CallbackContext context);
        void OnDestroy(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnUnshowMenu(InputAction.CallbackContext context);
    }
    public interface IOnOneHookActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTension(InputAction.CallbackContext context);
        void OnFirstHook(InputAction.CallbackContext context);
        void OnSecondHook(InputAction.CallbackContext context);
        void OnNewBot(InputAction.CallbackContext context);
        void OnDestroy(InputAction.CallbackContext context);
    }
    public interface IOnTwoHookActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTension(InputAction.CallbackContext context);
        void OnFirstHook(InputAction.CallbackContext context);
        void OnSecondHook(InputAction.CallbackContext context);
        void OnNewBot(InputAction.CallbackContext context);
        void OnDestroy(InputAction.CallbackContext context);
    }
    public interface IDialogActions
    {
    }
}
